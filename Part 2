# Life insurance rates are calc using mortality statistics from the recent past
# There are priced such that companies are almost assured to profit as long as
# the prob of death remains similar
# If an event occurs that changes the prob of death in a given age group,
# The company risk significant loses 
# We will look at a scenario in which a lethal pandemic disease increases
# the prob of death within one yr for a 50 yr old to 0.015
# Unable to predict the outbreak, the company has sold 1,000 $150,000 life 
# insurance policies for $1,150

library(tidyverse)

## Q1
# What is the expected val of the company's profits over 1000 policies?
n <- 1000
a <- -150000
b <- 1150
p <- 0.015
mu <- n * (a*p + b*(1-p))
mu
#: -1117250



## Q2
# What is the std error of the expected val of the company's profit?
sigma <- sqrt(n) * abs(a-b) * sqrt(p*(1-p))
sigma
#: 580994.3


## Q3
# What's prob of the company losing money?
pnorm(0, mu, sigma)
#: 0.9727597



## Q4
# Suppose the company can afford to sustain one time loses of $1,000,000
# but larger loses will force it to go out of business
# What's the prob of losing more than $1,000,000
pnorm(-1000000, mu, sigma)
#: 0.5799671



## Q5
# What's the lowest death prob for which the chance of losing money exceeds
# 90%
# Investigate death prob: p <- seq(.01, .03, .001)
p <- seq(.01, .03, .001)
mu_se <- function(p) {
  n <- 1000
  a <- -150000
  b <- 1150
  mu <- n * (a*p + b*(1-p))
  se <- sqrt(n) * abs(a - b) * sqrt(p * (1-p))
  pnorm(0, mu, se)
}
prob_lose_money <- sapply(p, mu_se)
death_p <- data.frame(p, prob_lose_money)
death_p %>%
  filter(prob_lose_money > 0.9) %>%
  filter(p == min(p)) %>%
  pull(p)
#: 0.013



## Q5
# Investigate death prob: p <- seq(.01, .03, .0025)
# What's the lowest death prob for which the chance of losing over $1 mil
# exceeds 90%
p <- seq(.01, .03, .0025)
mu_se_mil <- function(p) {
  n <- 1000
  a <- -150000
  b <- 1150
  mu <- n * (a*p + b*(1-p))
  se <- sqrt(n) * abs(a - b) * sqrt(p * (1-p))
  pnorm(-10^6, mu, se)
}
prob_lose_mil <- sapply(p, mu_se_mil)
death_p_mil <- data.frame(p, prob_lose_mil)
death_p_mil %>%
  filter(prob_lose_mil > 0.9) %>%
  filter(p == min(p)) %>%
  pull(p)
#: 0.02



## Q6
# Define a sampling model for simulating the total profit over 1,000 loans
# with prob of p_loss to .015, loss of -$150,000 on a claim,
# and profit of $1,150 when there's no claim
# Set the seed to 25, then run the model
# What's the reported profit or loss in millions (that's divided by 10^6)
set.seed(25)
n <- 1000
a <- -150000
b <- 1150
p_loss <- 0.015

pl <- sample(c(1, 0), n, replace = TRUE, prob = c(1-p_loss, p_loss))
profit <- 1150 * sum(pl == 1) / (10^6)
loss <- -150000 * sum(pl == 0) / (10^6)
profit + loss
#: -1.41955



## Q7
# Set the seed to 27 then run a Monte Carlo simulation of ur sampling model
# with 10000 replicates to simulate the range of profits or losses over
# 1000 loans
# What's the observed prob of losing 1 mil or more
set.seed(27)
S <- replicate(10000, {
  n <- 1000
  a <- -150000
  b <- 1150
  p_loss <- 0.015
  
  pl <- sample(c(1, 0), n, replace = TRUE, prob = c(1-p_loss, p_loss))
  profit <- 1150 * sum(pl == 1) / (10^6)
  loss <- -150000 * sum(pl == 0) / (10^6)
  profit + loss
})
sum(S <= -1) / 10000
# another way
mean(S <= -1)

#: 0.5388
